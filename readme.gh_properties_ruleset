# GitHub Repository Properties Manager

A Python utility to manage GitHub repository settings and custom properties across multiple repositories.

## Features

- Update repository settings via GitHub API
- Manage custom properties for repositories
- Support for multiple repositories in a single run
- Robust validation and error handling
- Detailed logging with timestamps

## Supported Repository Settings

The following repository settings can be configured:

### Boolean Settings (must be exactly 'true' or 'false')
- `delete_branch_on_merge`
- `has_wiki`
- `has_issues`
- `has_projects`
- `allow_squash_merge`
- `allow_merge_commit`
- `allow_rebase_merge`
- `allow_auto_merge`
- `private`
- `is_template`
- `archived`
- `allow_forking`
- `web_commit_signoff_required`

### String Settings
- `default_branch` (must be an existing branch)
- `name`
- `description`
- `homepage`
- `visibility`

## Input File Format

The input file uses `::` as a delimiter with the following format:
```
repository::custom-properties::repository-settings
```

Example:
```
source-org-test/java_repo_1::test-customer-property-1=true,test-customer-property-2=checking::delete_branch_on_merge=true,default_branch=main
java_docker_test111::test-customer-property-1=false,test-customer-property-2=nothing::delete_branch_on_merge=false
```

### Format Rules
1. Repository name can be either:
   - Full name with organization: `org-name/repo-name`
   - Just repository name: `repo-name` (uses default organization)
2. Custom properties are key-value pairs separated by commas
3. Repository settings are key-value pairs separated by commas
4. Boolean settings must be exactly 'true' or 'false'
5. When setting default_branch, the branch must exist in the repository

## Validation

The script performs several validations:

1. **Boolean Values**: Must be exactly 'true' or 'false'
   ```
   # Valid
   delete_branch_on_merge=true
   delete_branch_on_merge=false
   
   # Invalid (will be skipped with error)
   delete_branch_on_merge=tru
   delete_branch_on_merge=yes
   ```

2. **Branch Names**: When setting default_branch, validates that the branch exists
   ```
   # Will only succeed if 'main' exists
   default_branch=main
   ```

3. **Repository Names**: Validates format and existence
   ```
   # Valid formats
   org-name/repo-name
   repo-name
   ```

## Usage

```bash
python gh_properties_ruleset.py -r input_repos.txt -c certificate_path [-t TOKEN_ENV_VAR]
```

### Arguments
- `-r, --repos-file`: Path to input file containing repository configurations
- `-c, --cert`: Path to SSL certificate file
- `-t, --token-env`: Environment variable name containing GitHub token (default: GITHUB_TOKEN)

## Error Handling

The script handles various error cases:
1. Invalid boolean values in settings
2. Non-existent branches for default_branch
3. Invalid repository names
4. Network and API errors
5. Permission issues

All errors are:
- Logged with timestamps
- Written to a log file in the output directory
- Displayed in the console
- Non-fatal (script continues processing other repositories)

## Log Files

Log files are created in the `output` directory with the format:
```
LOG_input-file-name_DDMMMYYYY_HHMMSS.log
```

Each log entry includes:
- Timestamp
- Log level (ERROR, WARNING, SUCCESS, INFO)
- Detailed message

## Requirements

- Python 3.x
- `requests` library
- GitHub Personal Access Token with appropriate permissions
- Optional: SSL certificate for enterprise GitHub instances
