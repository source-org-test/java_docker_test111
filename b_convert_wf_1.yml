name: ci-docker_build

on:
  workflow_dispatch:
    inputs:
      base_tag:
        description: 'Base tag'
        required: false 
        default: 'latest'
      docker_package_version:
          description: Version of Dockerfile
          default: '0.1.0'
          required: false
          type: string
      create_mock_packages:
          description: 'Create mock packages if download fails'
          default: false
          required: false
          type: boolean
          
permissions:
  contents: read
  packages: write
  id-token: write
  
env:
  BASE_IMAGE: 'fajob' 
  BASE_TAG: ${{ github.event.inputs.base_tag || 'latest' }}
  QUAY: 'registry.cigna.com/cognizant'
  CREATE_MOCK_PACKAGES: ${{ github.event.inputs.create_mock_packages || 'false' }}

jobs:
  build:
    runs-on: Windows-Runner
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Validate Environment Variables
      shell: pwsh
      run: |
        $requiredVars = @('BASE_IMAGE', 'BASE_TAG', 'QUAY')
        $missingVars = @()
        
        foreach ($var in $requiredVars) {
            if (-not (Get-Item env:$var -ErrorAction SilentlyContinue)) {
                $missingVars += $var
            }
        }
        
        if ($missingVars.Count -gt 0) {
            throw "ERROR: Required environment variables not set: $($missingVars -join ', ')"
        }
        
        Write-Output "Environment validation successful"
        Write-Output "BASE_IMAGE: $env:BASE_IMAGE"
        Write-Output "BASE_TAG: $env:BASE_TAG"
        Write-Output "QUAY: $env:QUAY"
    
    - name: Setup JFrog Authentication
      shell: pwsh
      run: |
        # This step sets up authentication for JFrog Artifactory
        # The actual credentials should be stored as GitHub Secrets
        
        Write-Output "Setting up JFrog authentication..."
        
        # Check if secrets are available and set them as environment variables
        if ('${{ secrets.JFROG_USERNAME }}' -ne '' -and '${{ secrets.JFROG_PASSWORD }}' -ne '') {
            Write-Output "Using JFrog username/password authentication"
            $env:JFROG_USERNAME = '${{ secrets.JFROG_USERNAME }}'
            $env:JFROG_PASSWORD = '${{ secrets.JFROG_PASSWORD }}'
        }
        elseif ('${{ secrets.JFROG_API_KEY }}' -ne '') {
            Write-Output "Using JFrog API key authentication"
            $env:JFROG_API_KEY = '${{ secrets.JFROG_API_KEY }}'
        }
        else {
            Write-Output "No authentication credentials found in secrets. Will attempt anonymous access."
        }
    
    - name: Prepare Build Directories
      shell: pwsh
      run: |
        $paths = @(
          "./build/nupkg",
          "./build/bin"
        )
        
        foreach ($path in $paths) {
          if (Test-Path $path) {
            Write-Output "Cleaning existing directory: $path"
            Remove-Item -Path $path -Recurse -Force
          }
          Write-Output "Creating directory: $path"
          New-Item -Path $path -ItemType Directory -Force | Out-Null
        }
    
    - name: Gather and Process Manifests
      shell: pwsh
      run: |
        # Helper function to convert PSCustomObject to Hashtable
        function ConvertTo-Hashtable {
            param (
                [Parameter(ValueFromPipeline)]
                $InputObject
            )
            process {
                if ($null -eq $InputObject) { return $null }
                if ($InputObject -is [System.Collections.IEnumerable] -and $InputObject -isnot [string]) {
                    $collection = @(
                        foreach ($object in $InputObject) {
                            ConvertTo-Hashtable $object
                        }
                    )
                    Write-Output -NoEnumerate $collection
                } elseif ($InputObject -is [psobject]) {
                    $hash = @{}
                    foreach ($property in $InputObject.PSObject.Properties) {
                        $hash[$property.Name] = ConvertTo-Hashtable $property.Value
                    }
                    $hash
                } else {
                    $InputObject
                }
            }
        }

        try {
            Write-Output "[INFO] Gathering manifests..."

            # Get list of manifest files
            $files = $(Get-ChildItem -Path ".\${env:BASE_IMAGE}" -Recurse -File -Include *manifest.json*);
            Write-Output "[INFO] Found $($files.Count) manifest files"

            # Translate manifest file content into K,V hashtables
            $content = @();
            For ($i = 0; $i -lt $files.Count; $i++) {
                Write-Output "[INFO] Processing manifest: $($files[$i].Name)"
                $content += $($files[$i] | Get-Content -Raw | ConvertFrom-Json | ConvertTo-Hashtable);
            }

            $packages = @{};
            For ($i = 0; $i -lt $content.Count; $i++) {
                # Keys are part of the hashtable and cannot be referenced by index.
                # So we convert them to a list of strings and iterate through that.
                $keys = $content[$i].Keys -as [string[]];
                For ($n = 0; $n -lt $keys.Count; $n++) {
                    $value = $content[$i].$($keys[$n]);
                    # Compare values for each key and drop lowest
                    If (!$packages.ContainsKey($keys[$n])) {
                        Write-Output "[INFO] Adding package: $($keys[$n]) (version: $($value.version), build: $($value.build))"
                        $packages.Add($keys[$n], $value);
                    }
                    ElseIf ($packages.$($keys[$n]).version -lt $value.version) {
                        Write-Output "[INFO] Updating package: $($keys[$n]) (new version: $($value.version), build: $($value.build))"
                        $packages.$($keys[$n]) = $value;
                    }
                    ElseIf (($packages.$($keys[$n]).version -eq $value.version) -and (($packages.$($keys[$n]).build -lt $value.build -and $packages.$($keys[$n]).build -ne 'latest') -or $value.build -eq 'latest')) {
                        Write-Output "[INFO] Updating package: $($keys[$n]) (same version, new build: $($value.build))"
                        $packages.$($keys[$n]) = $value;            
                    }
                }
            }

            Write-Output "[INFO] Writing manifest with $($packages.Count) packages"
            # Convert K,V pairs back to JSON so we can log it to a file
            $packages | ConvertTo-Json | Out-File -FilePath './manifest.json' -NoNewline -Force;
            Write-Output "[INFO] Successfully created manifest.json"

            # Verify the written content
            $writtenContent = Get-Content './manifest.json' -Raw | ConvertFrom-Json
            Write-Output "[INFO] Manifest contents:"
            foreach ($key in $writtenContent.PSObject.Properties.Name) {
                Write-Output "  - $key"
                Write-Output "    Version: $($writtenContent.$key.version)"
                Write-Output "    Build: $($writtenContent.$key.build)"
                Write-Output "    Name: $($writtenContent.$key.name)"
            }
        }
        catch {
            Write-Error "Failed to process manifests: $_"
            exit 1
        }
    
    - name: Download and Process Packages
      shell: pwsh
      run: |
        try {
          if (-not (Test-Path './manifest.json')) {
              throw "manifest.json not found. Please ensure the Gather and Process Manifests step completed successfully."
          }
          
          $manifestContent = Get-Content './manifest.json' -Raw
          Write-Output "Processing manifest.json..."
          
          $packages = $manifestContent | ConvertFrom-Json
          if (-not $packages -or -not $packages.PSObject.Properties) {
              throw "No packages found in manifest.json or file is empty"
          }
          
          Write-Output "Found $($packages.PSObject.Properties.Count) packages to process"
          
          foreach ($package in $packages.PSObject.Properties) {
            if (-not $package.Value.name -or -not $package.Value.version -or -not $package.Value.build) {
                Write-Warning "Skipping invalid package entry: Missing required properties"
                continue
            }
            
            $key = $package.Name
            $name = $package.Value.name
            $version = $package.Value.version
            $build = $package.Value.build
            
            Write-Output "Processing package: $key"
            Write-Output "  Name: $name"
            Write-Output "  Version: $version"
            Write-Output "  Build: $build"
            
            try {
              
              if($package.Value.name -eq "PACKAGE") { 
                  $package_version = $package.Value.version
                  $package_build = $package.Value.build
                  Write-Output "  Found package version: $package_version (build: $package_build)"
                  
                  # Store as environment variable for potential later use
                  $env:PACKAGE_VERSION = $package_version
                  $env:PACKAGE_BUILD = $package_build
                  
                  # Skip downloading this special entry
                  continue
              }
              
              # Validate package name before proceeding
              if ([string]::IsNullOrWhiteSpace($name)) {
                  Write-Warning "  Invalid package name for key '$key'. Skipping."
                  continue
              }
              
              # Handle special package naming based on manifest
              # Try different package naming formats to handle potential repository structure differences
              $packageFileNames = @(
                  # Format 1: Name.Version.Build-Key.nupkg (current format)
                  "$name.$version.$build-$key.nupkg",
                  # Format 2: Key.Version.Build.nupkg (alternative format)
                  "$key.$version.$build.nupkg",
                  # Format 3: Name.Version.Build.nupkg (simple format)
                  "$name.$version.$build.nupkg"
              )
              
              $downloadSuccess = $false
              
              foreach ($packageFileName in $packageFileNames) {
                  # Construct and validate package URL - try different URL patterns
                  try {
                      # Try URL pattern 1: Using key in path
                      $packageUrl = "https://cigna.jfrog.io/artifactory/cigna-nuget-lower/Cigna/GBS/Cornerstone/Facets/$key/$packageFileName"
                      Write-Output "  Attempting download: $packageFileName"
                      Write-Output "  URL: $packageUrl"
                      
                      $outputPath = "./build/nupkg/temp_$name.zip"
                      
                      # Download with authentication
                      $headers = @{}
                      if ($env:JFROG_USERNAME -and $env:JFROG_PASSWORD) {
                          Write-Output "  Using authentication from environment variables"
                          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("$($env:JFROG_USERNAME):$($env:JFROG_PASSWORD)")))
                          $headers.Add("Authorization", "Basic $base64AuthInfo")
                      }
                      elseif ($env:JFROG_API_KEY) {
                          Write-Output "  Using JFrog API key for authentication"
                          $headers.Add("X-JFrog-Art-Api", $env:JFROG_API_KEY)
                      }
                      else {
                          Write-Output "  No authentication credentials found. Attempting anonymous access."
                          # Some organizations configure JFrog to require specific headers even for anonymous access
                          $headers.Add("X-JFrog-Art-Api", "")
                      }
                      
                      # Try to download with appropriate headers
                      Invoke-WebRequest -Uri $packageUrl -OutFile $outputPath -Headers $headers -UseBasicParsing -ErrorAction Stop
                      $downloadSuccess = $true
                      Write-Output "  Download successful!"
                      break
                  }
                  catch {
                      Write-Warning "  Failed to download package from $packageUrl : $_"
                      # Continue to next URL pattern
                  }
                  
                  # Try URL pattern 2: Direct to Facets folder
                  if (-not $downloadSuccess) {
                      $packageUrl = "https://cigna.jfrog.io/artifactory/cigna-nuget-lower/Cigna/GBS/Cornerstone/Facets/$packageFileName"
                      Write-Output "  Attempting alternate URL: $packageUrl"
                      
                      try {
                          Invoke-WebRequest -Uri $packageUrl -OutFile $outputPath -Headers $headers -UseBasicParsing -ErrorAction Stop
                          $downloadSuccess = $true
                          Write-Output "  Download successful!"
                          break
                      }
                      catch {
                          Write-Warning "  Failed to download package from alternate URL: $_"
                      }
                  }
              }
              
              if (-not $downloadSuccess) {
                  Write-Warning "  All download attempts failed for package: $name. Skipping."
                  
                  # Check if we should create a mock package for testing purposes
                  if ($env:CREATE_MOCK_PACKAGES -eq "true") {
                      Write-Output "  Creating mock package for testing purposes..."
                      
                      # Create directories
                      $paths = @(
                        "./build/nupkg/$name",
                        "./build/bin/$name"
                      )
                      foreach ($path in $paths) {
                        New-Item -ItemType Directory -Path $path -Force | Out-Null
                      }
                      
                      # Create a mock DLL file
                      $mockDllPath = "./build/bin/$name/$name.dll"
                      Set-Content -Path $mockDllPath -Value "Mock DLL for $name version $version build $build"
                      
                      Write-Output "  Created mock package: $name"
                      # Don't skip this package since we created a mock
                  }
                  else {
                      # Skip this package
                      continue
                  }
              }
              
              if (-not (Test-Path $outputPath)) {
                throw "Download failed - output file not created"
              }
              
              $paths = @(
                "./build/nupkg/$name",
                "./build/bin/$name"
              )
              foreach ($path in $paths) {
                New-Item -ItemType Directory -Path $path -Force | Out-Null
              }
              
              Write-Output "  Extracting package..."
              try {
                  Expand-Archive -Path $outputPath -DestinationPath "./build/nupkg/$name" -Force -ErrorAction Stop
              }
              catch {
                  Write-Warning "  Failed to extract package: $_"
                  # Clean up the failed download
                  if (Test-Path $outputPath) {
                      Remove-Item -Path $outputPath -Force
                  }
                  continue
              }
              
              # Move required files
              $fileTypes = @('*.dll', '*.deps.json', '*.pdb')
              $movedFiles = 0
              foreach ($type in $fileTypes) {
                $files = Get-ChildItem -Path "./build/nupkg/$name" -Filter $type -Recurse
                if ($files) {
                  try {
                      $files | Move-Item -Destination "./build/bin/$name" -Force -ErrorAction Stop
                      $movedFiles += $files.Count
                      Write-Output "  Moved $($files.Count) $type files"
                  }
                  catch {
                      Write-Warning "  Failed to move $type files: $_"
                  }
                }
              }
              
              if ($movedFiles -eq 0) {
                Write-Warning "  No files were found to move for package: $name"
                # Clean up extracted files if no usable files were found
                if (Test-Path "./build/nupkg/$name") {
                    Remove-Item -Path "./build/nupkg/$name" -Recurse -Force
                }
                continue
              }
              
              Remove-Item -Path $outputPath -Force
              Write-Output "  Successfully processed: $name ($movedFiles files)"
            }
            catch {
              Write-Warning "  Failed processing $name : $_"
              continue
            }
          }
          
          # Generate a summary report of processed packages
          $processedPackages = Get-ChildItem -Path "./build/bin" -Directory
          Write-Output "Package processing completed. Summary:"
          Write-Output "----------------------------------------"
          Write-Output "Total packages processed: $($processedPackages.Count)"
          
          if ($processedPackages.Count -gt 0) {
            foreach ($pkg in $processedPackages) {
              $fileCount = (Get-ChildItem -Path $pkg.FullName -Recurse -File).Count
              Write-Output "- $($pkg.Name): $fileCount files"
            }
          }
          
          # Check if package version was found and set
          if ($env:PACKAGE_VERSION) {
            Write-Output "Using package version: $env:PACKAGE_VERSION (build: $env:PACKAGE_BUILD)"
          } else {
            Write-Warning "No package version information found in manifest"
          }
          
          Write-Output "----------------------------------------"
        }
        catch {
          Write-Error "Failed to process packages: $_"
          exit 1
        }

  CI:
    uses: zilvertonz/usmg-gdem-ghactions-workflows/.github/workflows/ci.yml@v1
    with:
        project-type: "docker"
        docker_package_version: ${{ inputs.docker_package_version }}
        bypass_linting: true # Disables linting
        dockerfile_path: 'fajob' # <--- Dockerfile path
        docker_image_name: 'usmg-facets-fajob-test' # <--- Name of your Docker image. By DEFAULT the name will be the name of repo.
        
    # - name: Clean Up
    #   if: always()
    #   shell: pwsh
    #   run: |
    #     if (Test-Path ./build) {
    #       Write-Output "Cleaning up build directory..."
    #       Remove-Item -Path ./build -Recurse -Force
    #     }
